{"version":3,"sources":["components/About.js","components/Nav.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","mystyle","color","mode","backgroundColor","React","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Nav","concat","Link","to","title","aria-label","aria-current","onClick","togglemode","height","width","TextForm","text","setText","useState","Color","heading","onChange","event","target","value","rows","disabled","length","converttouppercase","newtext","toUpperCase","showAlert","converttolowercase","toLowerCase","cleartext","removespace","split","join","copytext","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","element","Alert","alert","role","msg","App","setMode","setAlert","removetextcolor","body","classList","remove","Router","cls","add","Routes","Route","path","message","tpye","setTimeout","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.fd04294c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    let mystyle={\r\n        color:props.mode==='dark'?'white':'#042743',\r\n        backgroundColor:props.mode==='dark'?'rgba(36 74 104)':'white'\r\n    }\r\n  return (\r\n    <>\r\n    <div className='container'style={mystyle}>\r\n            <h3 className='my-3' style={{color:props.mode==='dark'?'white':'#042743'}}>About Us</h3>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\"  style={mystyle}>\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={mystyle}>\r\n                    Analyze Your Text\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={mystyle}>\r\n                    Free To Use\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={mystyle}>\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={mystyle}>\r\n                    Browser Compatibility\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from \"react\"\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom';\nexport default function Nav(props){\n    return(\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode}-lg bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <Link className={`navbar-brand text-${props.mode==='light'?'dark':'light'}`} to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\"> \n                    <li className=\"nav-item\">\n                    <Link className={`nav-link active text-${props.mode==='light'?'dark':'light'}`} aria-current=\"page\" to=\"/\">Home</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                    <Link className={`nav-link text-${props.mode==='light'?'dark':'light'}`} to=\"/about\">About</Link>\n                    </li>\n                </ul>\n                <div className=\"d-flex\">\n                    <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.togglemode('primary')}} style={{height:'30px',width:'30px'}}></div>\n                    <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.togglemode('danger')}} style={{height:'30px',width:'30px'}}></div>\n                    <div className=\"bg-success rounded mx-2\" onClick={()=>{props.togglemode('success')}} style={{height:'30px',width:'30px'}}></div>\n                    <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.togglemode('warning')}} style={{height:'30px',width:'30px'}}></div>\n                    <div className=\"bg-light rounded mx-2\" onClick={()=>{props.togglemode('light')}} style={{height:'30px',width:'30px'}}></div>\n                    <div className=\"bg-dark rounded mx-2\" onClick={()=>{props.togglemode('dark')}} style={{height:'30px',width:'30px'}}></div>\n                </div>\n                </div>\n            {/* <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={()=>{props.togglemode(null)}} id=\"flexSwitchCheckDefault\"/>\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable {props.mode==='light'?'dark':'light'} mode</label>\n            </div> */}\n            </div>\n        </nav>\n    )\n}\nNav.propTypes={\n    title:PropTypes.string\n}","import React,{useState} from 'react'\n\nexport default function TextForm(props) {\n    const [text,setText]=useState(\"Enter Your Text\");\n\n    const handleonchange= (event)=>{\n        setText(event.target.value)\n    }\n    const converttouppercase= ()=>{\n        let newtext=text.toUpperCase();\n        setText(newtext);\n        props.showAlert(\"Converted To Uppercase\",\"Success\");\n    }\n    const converttolowercase=()=>{\n        let newtext=text.toLowerCase();\n        setText(newtext);\n        props.showAlert(\"Converted To Lowercase\",\"Success\");\n    }\n    const removespace =() =>{\n        let newtext=text.split(/[ ]+/);\n        setText(newtext.join(\"\"));\n    }\n    const cleartext = ()=>{\n        let newtext='';\n        setText(newtext);\n        props.showAlert(\"Text Cleared\",\"Success\");\n    }\n    const copytext =()=>{\n        var text=document.getElementById('exampleFormControlTextarea1')\n        text.select();\n        navigator.clipboard.writeText(text.value);\n        document.getSelection().removeAllRanges();\n        props.showAlert(\"Copied to clipboard\",\"Success\");\n    }\n  return (\n    <>\n    <div className='container'>\n        <h1 style={{Color: props.mode==='dark'?'white':'black'}}>{props.heading}</h1>\n        <div className=\"mb-3\">\n            <textarea className=\"form-control mb-3\" onChange={handleonchange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"exampleFormControlTextarea1\" rows=\"8\" value={text}></textarea>\n        <button disabled={text.length===0} className=\"btn btn-primary upper\" onClick={converttouppercase}>Convert to Uppercase</button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={converttolowercase}>Convert to lowercase</button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\"  onClick={cleartext}>Clear Text</button>\n\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\"  onClick={removespace}>Remove Spaces</button>\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={copytext}>Copy Text</button>\n        </div>\n        <div className='container my-3'>\n            <h1>Your text summary</h1>\n            <p>\n                {text.split(' ').filter((element)=>{return element.length!==0}).length} words and {text.length} characters\n            </p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to Preview\"}</p>\n        </div>\n</div>\n    </>\n  )\n}\n","import React from 'react'\n\nexport default function Alert(props) {\n  return (\n    <div style={{height:'50px'}}>\n    {props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\n        {props.alert.msg}\n    </div>}\n    </div>\n  )\n}","import './App.css';\nimport React, { useState } from 'react';\nimport About from './components/About.js';\nimport Nav from './components/Nav.js'\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {BrowserRouter as Router,\nRoute,\nRoutes}\nfrom \"react-router-dom\";\n\n\nfunction App() { \n  var [mode,setMode]=useState('light');\n\n  const [alert,setAlert]=useState(null);\n    \n    const showAlert= (message,type)=>{\n      setAlert({\n        msg:message,\n        tpye:type\n      })\n      setTimeout(() => {\n        setAlert(null,null);\n      }, 3000);\n    }\n\n    const removebodyclasses =()=>{\n      document.body.classList.remove('bg-danger');\n      document.body.classList.remove('bg-success');\n      document.body.classList.remove('bg-primary');\n      document.body.classList.remove('bg-warning');\n      document.body.classList.remove('bg-light');\n      document.body.classList.remove('bg-dark');\n    }\n    const removetextcolor =()=>{\n      document.body.classList.remove('text-white');\n      document.body.classList.remove('text-black');\n    }\n    var togglemode = (cls)=>{\n        // if(cls!=null){\n          removebodyclasses();\n          document.body.classList.add('bg-'+cls);\n          if(cls==='dark'){\n            removetextcolor();\n            document.body.classList.add('text-white');\n          }\n          if(cls==='light'){\n            removetextcolor();\n            document.body.classList.add('text-black');\n          }\n        // }\n          // if(mode === 'dark'){\n          //     setMode('light');\n          //     document.body.style.backgroundColor='white';\n          //     document.body.style.color='#212529';\n          //     // showAlert(\"light mode enabled\",\"success\");\n          // }\n          // if(mode === 'light'){\n          //     setMode('dark');\n          //     document.body.style.backgroundColor='#353e43';\n          //     document.body.style.color='white';\n          //     // showAlert(\"dark mode enabled\",\"success\");\n          // }\n        }\n  return (\n    <>\n    <Router>\n      <Nav title=\"TextUtils\" mode={mode} togglemode={togglemode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <Routes>\n          <Route path=\"/about\" element={<About mode={mode}/>} ></Route>\n          <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter text to analyze\" mode={mode} />} />\n        </Routes>\n      </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}